<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="demo-data-iris-in-sql.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0c45fb3" tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9e8b99b7-5dd1-4f94-ba72-fb306822a13cc87b5c9fede3a8a9ab72add650447d1b02ac89c7.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c87b5c9fede3a8a9ab72add650447d1b02ac89c7</xliffext:ms.openlocfilehash><xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9e8b99b7-5dd1-4f94-ba72-fb306822a13c</xliffext:ms.sourcegitcommit><xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02/27/2020</xliffext:ms.lasthandoff><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\advanced-analytics\tutorials\demo-data-iris-in-sql.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Iris demo data set for tutorials</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Create a database containing the Iris dataset and predictive models.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>This dataset is used in R and Python tutorials for SQL Server Machine Learning Services.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Iris demo data for Python and R tutorials in SQL Server</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In this exercise, create a SQL Server database to store data from the <bpt id="p1">[</bpt>Iris flower data set<ept id="p1">](https://en.wikipedia.org/wiki/Iris_flower_data_set)</ept> and models based on the same data.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Iris data is included in both the R and Python distributions installed by SQL Server, and is used in machine learning tutorials for SQL Server.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To complete this exercise, you should have <bpt id="p1">[</bpt>SQL Server Management Studio<ept id="p1">](https://docs.microsoft.com/sql/ssms/download-sql-server-management-studio-ssms?view=sql-server-2017)</ept> or another tool that can run T-SQL queries.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Tutorials and quickstarts using this data set include the following:</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Quickstart: Create, train, and use a Python model with stored procedures in SQL Server<ept id="p1">](quickstart-python-train-score-in-tsql.md)</ept></source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Create the database</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Start SQL Server Management Studio, and open a new <bpt id="p1">**</bpt>Query<ept id="p1">**</ept> window.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Create a new database for this project, and change the context of your <bpt id="p1">**</bpt>Query<ept id="p1">**</ept> window to use the new database.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If you're new to SQL Server, or are working on a server you own, a common mistake is to log in and start working without noticing that you are in the <bpt id="p1">**</bpt>master<ept id="p1">**</ept> database.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To be sure that you are using the correct database, always specify the context using the <ph id="ph1">`USE &lt;database name&gt;`</ph> statement (for example, <ph id="ph2">`use irissql`</ph>).</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Add some empty tables: one to store the data, and one to store the trained models.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>iris_models<ept id="p1">**</ept> table is used for storing serialized models generated in other exercises.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following code creates the table for the training data.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If you are new to T-SQL, it pays to memorize the <ph id="ph1">`DROP...IF`</ph> statement.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>When you try to  create a table and one already exists, SQL Server returns an error: "There is already an object named 'iris_data' in the database."</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>One way to avoid such errors is to delete any existing tables or other objects as part of your code.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Run the following code to create the table used for storing the trained model.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To save Python (or R) models in SQL Server, they must be serialized and stored in a column of type <bpt id="p1">**</bpt>varbinary(max)<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In addition to the model contents, typically, you would also add columns for other useful metadata, such as the model's name, the date it was trained, the source algorithm and parameters, source data, and so forth.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For now we'll keep it simple and use just the model name.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Populate the table</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can obtain built-in Iris data from either R or Python.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You can use Python or R to load the data into a data frame, and then insert it into a table in the database.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Moving training data from an external session into a SQL Server table is a multistep process:</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Design a stored procedure that gets the data you want.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Execute the stored procedure to actually get the data.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Construct an INSERT statement to specify where the retrieved data should be saved.</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>On systems with Python integration, create the following stored procedure that uses Python code to load the data.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>When you run this code, you should get the message "Commands completed successfully."</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>All this means is that the stored procedure has been created according to your specifications.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Alternatively, on systems having R integration, create a procedure that uses R instead.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To actually populate the table, run the stored procedure and specify the table where the data should be written.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>When run, the stored procedure executes the Python or R code, which loads the built-in Iris data set, and then inserts the data into the <bpt id="p1">**</bpt>iris_data<ept id="p1">**</ept> table.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If you're new to T-SQL, be aware that the INSERT statement only adds new data; it won't check for existing data, or delete and rebuild the table.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>To avoid getting multiple copies of the same data in a table, you can run this statement first: <ph id="ph1">`TRUNCATE TABLE iris_data`</ph>.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The T-SQL <bpt id="p1">[</bpt>TRUNCATE TABLE<ept id="p1">](https://docs.microsoft.com/sql/t-sql/statements/truncate-table-transact-sql)</ept> statement deletes existing data but keeps the structure of the table intact.</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>To modify the stored procedure later, you don't need to drop and recreate it.</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt>ALTER PROCEDURE<ept id="p1">](https://docs.microsoft.com/sql/t-sql/statements/alter-procedure-transact-sql)</ept> statement.</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Query the data</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>As a validation step, run a query to confirm the data was uploaded.</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In Object Explorer, under Databases, right-click the <bpt id="p1">**</bpt>irissql<ept id="p1">**</ept> database, and start a new query.</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Run some simple queries:</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Next steps</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In the following quickstart, you will create a machine learning model and save it to a table, and then use the model to generate predicted outcomes.</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Quickstart: Create, train, and use a Python model with stored procedures in SQL Server<ept id="p1">](quickstart-python-train-score-in-tsql.md)</ept></source>
        </trans-unit></group></body></file></xliff>