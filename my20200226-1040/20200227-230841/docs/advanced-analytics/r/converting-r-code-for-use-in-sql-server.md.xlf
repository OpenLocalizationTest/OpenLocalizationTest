<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="converting-r-code-for-use-in-sql-server.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0c45fb3" tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9e8b99b7-5dd1-4f94-ba72-fb306822a13c882ce47467a38ab4a891f632c9598070e13494e3.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">882ce47467a38ab4a891f632c9598070e13494e3</xliffext:ms.openlocfilehash><xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9e8b99b7-5dd1-4f94-ba72-fb306822a13c</xliffext:ms.sourcegitcommit><xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02/27/2020</xliffext:ms.lasthandoff><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\advanced-analytics\r\converting-r-code-for-use-in-sql-server.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Convert R code for SQL</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Migrate R code to a SQL Server stored procedure for solution deployment and data access to relational data on SQL Server.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Convert R code for execution in SQL Server (In-Database) instances</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This article provides high-level guidance on how to modify R code to work in SQL Server.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>When you move R code from R Studio or another environment to SQL Server, most often the code works without further modification: for example, if the code is simple, such as a function that takes some inputs and returns a value.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>It is also easier to port solutions that use the <bpt id="p1">**</bpt>RevoScaleR<ept id="p1">**</ept> or <bpt id="p2">**</bpt>MicrosoftML<ept id="p2">**</ept> packages, which support execution in different execution contexts with minimal changes.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>However, your code might require substantial changes if any of the following apply:</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You use R libraries that access the network or that cannot be installed on SQL Server.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The code makes separate calls to data sources outside SQL Server, such as Excel worksheets, files on shares, and other databases.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You want to run the code in the <bpt id="p1">*</bpt><ph id="ph1">\@</ph>script<ept id="p1">*</ept> parameter of <bpt id="p2">[</bpt>sp_execute_external_script<ept id="p2">](../../relational-databases/system-stored-procedures/sp-execute-external-script-transact-sql.md)</ept> and also parameterize the stored procedure.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Your original solution includes multiple steps that might be more efficient in a production environment if executed independently, such as data preparation or feature engineering vs. model training, scoring, or reporting.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You want to improve optimize performance by changing libraries, using parallel execution, or offloading some processing to SQL Server.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Step 1.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Plan requirements and resources</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Packages<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Determine which packages are needed and ensure that they work on SQL Server.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Install packages in advance, in the default package library used by Machine Learning Services.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>User libraries are not supported.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Data sources<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If you intend to embed your R code in <bpt id="p1">[</bpt>sp_execute_external_script<ept id="p1">](../../relational-databases/system-stored-procedures/sp-execute-external-script-transact-sql.md)</ept>, identify primary and secondary data sources.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Primary<ept id="p1">**</ept> data sources are large datasets, such as model training data, or input data for predictions.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Plan to map your largest dataset to the input parameter of <bpt id="p1">[</bpt>sp_execute_external_script<ept id="p1">](../../relational-databases/system-stored-procedures/sp-execute-external-script-transact-sql.md)</ept>.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Secondary<ept id="p1">**</ept> data sources are typically smaller data sets, such as lists of factors, or additional grouping variables.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Currently, sp_execute_external_script supports only a single dataset as input to the stored procedure.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>However, you can add multiple scalar or binary inputs.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Stored procedure calls preceded by EXECUTE cannot be used as an input to <bpt id="p1">[</bpt>sp_execute_external_script<ept id="p1">](../../relational-databases/system-stored-procedures/sp-execute-external-script-transact-sql.md)</ept>.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You can use queries, views, or any other valid SELECT statement.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Determine the outputs you need.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If you run R code using sp_execute_external_script, the stored procedure can output just one data frame as a result.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>However, you can also output multiple scalar outputs, including plots and models in binary format, as well as other scalar values derived from R code or SQL parameters.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Data types<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Make a checklist of possible data type issues.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>All R data types are supported by SQL Server machine Learning Services.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>However, <ph id="ph1">[!INCLUDE[ssNoVersion](../../includes/ssnoversion-md.md)]</ph> supports a greater variety of data types than does R. Therefore, some implicit data type conversions are performed when sending <ph id="ph2">[!INCLUDE[ssNoVersion](../../includes/ssnoversion-md.md)]</ph> data to R, and vice versa.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You might need to explicitly cast or convert some data.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>NULL values are supported.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>However, R uses the <ph id="ph1">`na`</ph> data construct to represent a missing value, which is similar to a null.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Consider eliminating dependency on data that cannot be used by R: for example, rowid and GUID data types from SQL Server cannot be consumed by R and generate errors.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>R Libraries and Data Types<ept id="p1">](../r/r-libraries-and-data-types.md)</ept>.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Step 2.</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Convert or repackage code</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>How much you change your code depends on whether you intend to submit the R code from a remote client to run in the SQL Server compute context, or intend to deploy the code as part of a stored procedure, which can provide better performance and data security.</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Wrapping your code in a stored procedure imposes some additional requirements.</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Define your primary input data as a SQL query wherever possible, to avoid data movement.</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>When running R in a stored procedure, you can pass through multiple <bpt id="p1">**</bpt>scalar<ept id="p1">**</ept> inputs.</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For any parameters that you want to use in the output, add the <bpt id="p1">**</bpt>OUTPUT<ept id="p1">**</ept> keyword.</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For example, the following scalar input <ph id="ph1">`@model_name`</ph> contains the model name, which is also output in its own column in the results:</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Any variables that you pass in as parameters of the stored procedure <bpt id="p1">[</bpt>sp_execute_external_script<ept id="p1">](../../relational-databases/system-stored-procedures/sp-execute-external-script-transact-sql.md)</ept> must be mapped to variables in the R code.</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>By default, variables are mapped by name.</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>All columns in the input dataset must also be mapped to variables in the R script.</source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For example, assume your R script contains a formula like this one:</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>An error is raised if the input dataset does not contain columns with the matching names ArrDelay, CRSDepTime, DayOfWeek, CRSDepHour, and DayOfWeek.</source>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>In some cases, an output schema must be defined in advance for the results.</source>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For example, to insert the data into a table, you must use the <bpt id="p1">**</bpt>WITH RESULT SET<ept id="p1">**</ept> clause to specify the schema.</source>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The output schema is also required if the R script uses the argument <ph id="ph1">`@parallel=1`</ph>.</source>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The reason is that multiple processes might be created by SQL Server to run the query in parallel, with the results collected at the end.</source>
        </trans-unit><trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Therefore, the output schema must be prepared before the parallel processes can be created.</source>
        </trans-unit><trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In other cases, you can omit the result schema by using the option <bpt id="p1">**</bpt>WITH RESULT SETS UNDEFINED<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This statement returns the dataset from the R script without naming the columns or specifying the SQL data types.</source>
        </trans-unit><trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Consider generating timing or tracking data using T-SQL rather than R.</source>
        </trans-unit><trans-unit id="161" translate="yes" xml:space="preserve">
          <source>For example, you could pass the system time or other information used for auditing and storage by adding a T-SQL call that is passed through to the results, rather than generating similar data in the R script.</source>
        </trans-unit><trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Improve performance and security<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Avoid writing predictions or intermediate results to file.</source>
        </trans-unit><trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Write predictions to a table instead, to avoid data movement.</source>
        </trans-unit><trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Run all queries in advance, and review the SQL Server query plans to identify tasks that can be performed in parallel.</source>
        </trans-unit><trans-unit id="166" translate="yes" xml:space="preserve">
          <source>If the input query can be parallelized, set <ph id="ph1">`@parallel=1`</ph> as part of your arguments to <bpt id="p1">[</bpt>sp_execute_external_script<ept id="p1">](../../relational-databases/system-stored-procedures/sp-execute-external-script-transact-sql.md)</ept>.</source>
        </trans-unit><trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Parallel processing with this flag is typically possible any time that SQL Server can work with partitioned tables or distribute a query among multiple processes and aggregate the results at the end.</source>
        </trans-unit><trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Parallel processing with this flag is typically not possible if you are training models using algorithms that require all data to be read, or if you need to create aggregates.</source>
        </trans-unit><trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Review your R code to determine if there are steps that can be performed independently, or performed more efficiently, by using a separate stored procedure call.</source>
        </trans-unit><trans-unit id="170" translate="yes" xml:space="preserve">
          <source>For example, you might get better performance by doing feature engineering or feature extraction separately, and saving the values to a table.</source>
        </trans-unit><trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Look for ways to use T-SQL rather than R code for set-based computations.</source>
        </trans-unit><trans-unit id="172" translate="yes" xml:space="preserve">
          <source>For example, this R solution shows how user-defined T-SQL functions and R can perform the same feature engineering task: <bpt id="p1">[</bpt>Data Science End-to-End Walkthrough<ept id="p1">](../tutorials/walkthrough-data-science-end-to-end-walkthrough.md)</ept>.</source>
        </trans-unit><trans-unit id="173" translate="yes" xml:space="preserve">
          <source>If possible, replace conventional R functions with <bpt id="p1">**</bpt>ScaleR<ept id="p1">**</ept> functions that support distributed execution.</source>
        </trans-unit><trans-unit id="174" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Comparison of Base R and Scale R Functions<ept id="p1">](https://docs.microsoft.com/machine-learning-server/r-reference/revoscaler/revoscaler-compared-to-base-r)</ept>.</source>
        </trans-unit><trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Consult with a database developer to determine ways to improve performance by using SQL Server features such as <bpt id="p1">[</bpt>memory-optimized tables<ept id="p1">](https://docs.microsoft.com/sql/relational-databases/in-memory-oltp/introduction-to-memory-optimized-tables)</ept>, or, if you have Enterprise Edition, <bpt id="p2">[</bpt>Resource Governor<ept id="p2">](https://docs.microsoft.com/sql/relational-databases/resource-governor/resource-governor)</ept>).</source>
        </trans-unit><trans-unit id="176" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>SQL Server Optimization Tips and Tricks for Analytics Services<ept id="p1">](https://gallery.cortanaintelligence.com/Tutorial/SQL-Server-Optimization-Tips-and-Tricks-for-Analytics-Services)</ept></source>
        </trans-unit><trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Step 3.</source>
        </trans-unit><trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Prepare for deployment</source>
        </trans-unit><trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Notify the administrator so that packages can be installed and tested in advance of deploying your code.</source>
        </trans-unit><trans-unit id="180" translate="yes" xml:space="preserve">
          <source>In a development environment, it might be okay to install packages as part of your code, but this is a bad practice in a production environment.</source>
        </trans-unit><trans-unit id="181" translate="yes" xml:space="preserve">
          <source>User libraries are not supported, regardless of whether you are using a stored procedure or running R code in the SQL Server compute context.</source>
        </trans-unit><trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Package your R code in a stored procedure<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="183" translate="yes" xml:space="preserve">
          <source>If your code is relatively simple, you can embed it in a T-SQL user-defined function without modification, as described in these samples:</source>
        </trans-unit><trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Create an R function that runs in rxExec<ept id="p1">](../tutorials/deepdive-create-a-simple-simulation.md)</ept></source>
        </trans-unit><trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Feature engineering using T-SQL and R<ept id="p1">](../tutorials/sqldev-create-data-features-using-t-sql.md)</ept></source>
        </trans-unit><trans-unit id="186" translate="yes" xml:space="preserve">
          <source>If the code is more complex, use the R package <bpt id="p1">**</bpt>sqlrutils<ept id="p1">**</ept> to convert your code.</source>
        </trans-unit><trans-unit id="187" translate="yes" xml:space="preserve">
          <source>This package is designed to help experienced R users write good stored procedure code.</source>
        </trans-unit><trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The first step is to rewrite your R code as a single function with clearly defined inputs and outputs.</source>
        </trans-unit><trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Then, use the <bpt id="p1">**</bpt>sqlrutils<ept id="p1">**</ept> package to generate the input and outputs in the correct format.</source>
        </trans-unit><trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>sqlrutils<ept id="p1">**</ept> package generates the complete stored procedure code for you, and can also register the stored procedure in the database.</source>
        </trans-unit><trans-unit id="191" translate="yes" xml:space="preserve">
          <source>For more information and examples, see <bpt id="p1">[</bpt>sqlrutils (SQL)<ept id="p1">](ref-r-sqlrutils.md)</ept>.</source>
        </trans-unit><trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Integrate with other workflows<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Leverage T-SQL tools and ETL processes.</source>
        </trans-unit><trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Perform feature engineering, feature extraction, and data cleansing in advance as part of data workflows.</source>
        </trans-unit><trans-unit id="195" translate="yes" xml:space="preserve">
          <source>When you are working in a dedicated R development environment such as <ph id="ph1">[!INCLUDE[rsql_rtvs_md](../../includes/rsql-rtvs-md.md)]</ph> or RStudio, you might pull data to your computer, analyze the data iteratively, and then write out or display the results.</source>
        </trans-unit><trans-unit id="196" translate="yes" xml:space="preserve">
          <source>However, when standalone R code is migrated to SQL Server, much of this process can be simplified or delegated to other SQL Server tools.</source>
        </trans-unit><trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Use secure, asynchronous visualization strategies.</source>
        </trans-unit><trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Users of SQL Server often cannot access files on the server, and SQL client tools typically do not support the R graphics device.</source>
        </trans-unit><trans-unit id="199" translate="yes" xml:space="preserve">
          <source>If you generate plots or other graphics as part of the solution, consider exporting the plots as binary data and saving to a table, or writing.</source>
        </trans-unit><trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Wrap prediction and scoring functions in stored procedures for direct access by applications.</source>
        </trans-unit><trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Other resources</source>
        </trans-unit><trans-unit id="202" translate="yes" xml:space="preserve">
          <source>To view examples of how an R solution can be deployed in SQL Server, see these samples:</source>
        </trans-unit><trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Build a predictive model for  ski rental business using R and SQL Server<ept id="p1">](https://microsoft.github.io/sql-ml-tutorials/R/rentalprediction/)</ept></source>
        </trans-unit><trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>In-Database Analytics for the SQL Developer<ept id="p1">](../tutorials/sqldev-in-database-r-for-sql-developers.md)</ept> Demonstrates how you can make your R code more modular by wrapping it  in stored procedures</source>
        </trans-unit><trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>End-to-End Data Science Solution<ept id="p1">](../tutorials/walkthrough-data-science-end-to-end-walkthrough.md)</ept> Includes a comparison of feature engineering in R and T-SQL</source>
        </trans-unit></group></body></file></xliff>